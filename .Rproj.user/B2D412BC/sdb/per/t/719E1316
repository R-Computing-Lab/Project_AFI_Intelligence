{
    "contents" : "# Missing Data Removed Default, Rounding Added\nMean <- function(x,digit=3) {\n  round(mean(x, na.rm=TRUE),digit)}\nSd <- function(x,digit=3) {\n  round(sd(x, na.rm=TRUE),digit)}\nMedian <- function(x,digit=3) {\n  round(median(x, na.rm=TRUE),digit)}\nMin <- function(x,digit=3) {\n  round(min(x, na.rm=TRUE),digit)} \nMax <- function(x,digit=3) {\n  round(max(x, na.rm=TRUE),digit)}\n\nRowMedians <-function(x,digit=3,na.rm = TRUE) {\n  round(rowMedians(as.matrix(x), na.rm=na.rm),digit)\n  }\n\nCor <- function(x,digit=3) {\n  round(cor(x, use = \"pairwise.complete.obs\"),digit)}\n# Reverse Substrinf\nsubstrRight <- function(x, n, fromend=0, end=nchar(x)-fromend){\n  substr(x, end-n+1,end)}\n\ndf_AceEstimate=function(ACE){\n  data<-data.frame(ACE@ASquared,ACE@CSquared,ACE@ESquared,ACE@CaseCount)\n  names(data)<-c(\"ASquared\",\"CSquared\",\"ESquared\",\"CaseCount\")\n  data}\n\n# Correlation Matrix Nice\ncor_1star <- function(x,digit=3,sig=.05){ \n  require(Hmisc) \n  x <- as.matrix(x) \n  R <- rcorr(x)$r \n  p <- rcorr(x)$P \n  \n  ## define notions for significance levels; spacing is important.\n  mystars <- ifelse(p < sig, \"* \", \" \")\n  \n  ## trunctuate the matrix that holds the correlations to two decimal\n  R <- format(round(cbind(rep(-1.11, ncol(x)), R), digit))[,-1] \n  \n  ## build a new matrix that includes the correlations with their apropriate stars \n  Rnew <- matrix(paste(R, mystars, sep=\"\"), ncol=ncol(x)) \n  diag(Rnew) <- paste(diag(R), \" \", sep=\"\") \n  rownames(Rnew) <- colnames(x) \n  colnames(Rnew) <- paste(colnames(x), \"\", sep=\"\") \n  \n  ## remove upper triangle\n  Rnew <- as.matrix(Rnew)\n  Rnew[upper.tri(Rnew, diag = TRUE)] <- \"\"\n  Rnew <- as.data.frame(Rnew) \n  \n  ## remove last column and return the matrix (which is now a data frame)\n  Rnew <- cbind(Rnew[1:length(Rnew)-1])\n  return(Rnew) \n}\n\ncor_3stars <- function(x,digit=3){ \n  require(Hmisc) \n  x <- as.matrix(x) \n  R <- rcorr(x)$r \n  p <- rcorr(x)$P \n  \n  ## define notions for significance levels; spacing is important.\n  mystars <- ifelse(p < .001, \"***\", ifelse(p < .01, \"** \", ifelse(p < .05, \"* \", \" \")))\n  \n  ## trunctuate the matrix that holds the correlations to two decimal\n  R <- format(round(cbind(rep(-1.11, ncol(x)), R), digit))[,-1] \n  \n  ## build a new matrix that includes the correlations with their apropriate stars \n  Rnew <- matrix(paste(R, mystars, sep=\"\"), ncol=ncol(x)) \n  diag(Rnew) <- paste(diag(R), \" \", sep=\"\") \n  rownames(Rnew) <- colnames(x) \n  colnames(Rnew) <- paste(colnames(x), \"\", sep=\"\") \n  \n  ## remove upper triangle\n  Rnew <- as.matrix(Rnew)\n  Rnew[upper.tri(Rnew, diag = TRUE)] <- \"\"\n  Rnew <- as.data.frame(Rnew) \n  \n  ## remove last column and return the matrix (which is now a data frame)\n  Rnew <- cbind(Rnew[1:length(Rnew)-1])\n  return(Rnew) \n}\n#xtable(corstarsl(maleindiv[2:5]))\n\n## Knitr/Sweave Stuff\n\n\nlisting<- function(x, options) {\n paste0(\"\\\\begin{lstlisting}[breaklines=true]\\n\",\n        x, \"\\\\end{lstlisting}\\n\")\n}\n\n### Modified detachAllData from defunct epicalc package\ndetachAllData<-function () {\n  pos.to.detach <- (1:length(search()))[substring(search(), \n                                                  first = 1, last = 8) != \"package:\" & search() != \".GlobalEnv\" & \n                                          search() != \"Autoloads\" & search() != \"CheckExEnv\" & \n                                          search() != \"tools:rstudio\" & search() != \"TempEnv\"]\n  for (i in 1:length(pos.to.detach)) {\n    if (length(pos.to.detach) > 0) {\n      detach(pos = pos.to.detach[1])\n      pos.to.detach <- (1:length(search()))[substring(search(), \n                                                      first = 1, last = 8) != \"package:\" & search() != \n                                              \".GlobalEnv\" & search() != \"Autoloads\" & search() != \n                                              \"CheckExEnv\" & search() != \"tools:rstudio\" & \n                                              search() != \"TempEnv\"]\n    }\n  }\n}\n\n#### Remove row if missing value in specific collumn\n\ncompleteFun <- function(data, desiredCols) {\n  completeVec <- complete.cases(data[, desiredCols])\n  return(data[completeVec, ])\n}\n\n\nMean_0 <- function(x) base::round(mean(x, na.rm=TRUE),0)\nMean_1 <- function(x) base::round(mean(x, na.rm=TRUE),1)\nMean_2 <- function(x) base::round(mean(x, na.rm=TRUE),2)\nMean_3 <- function(x) base::round(mean(x, na.rm=TRUE),3)\nMean_4 <- function(x) base::round(mean(x, na.rm=TRUE),4)\n\nSd_0 <- function(x) round(stats::sd(x, na.rm=TRUE),0)\nSd_1 <- function(x) round(stats::sd(x, na.rm=TRUE),1)\nSd_2 <- function(x) round(stats::sd(x, na.rm=TRUE),2)\nSd_3 <- function(x) round(stats::sd(x, na.rm=TRUE),3)\nSd_4 <- function(x) round(stats::sd(x, na.rm=TRUE),4)\n",
    "created" : 1438801889304.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2477492293",
    "id" : "719E1316",
    "lastKnownWriteTime" : 1438801908,
    "path" : "C:/Dropbox/Work/Templates/R/Functions/Mason_Functions.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}